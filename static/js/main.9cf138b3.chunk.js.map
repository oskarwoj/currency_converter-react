{"version":3,"sources":["FormContainer/index.js","Header/index.js","Form/index.js","Result/index.js","App.js","serviceWorker.js","index.js"],"names":["FormContainer","children","className","Header","FieldSet","calculateResult","useState","amount","setAmount","firstCurrency","setFirstCurrency","secondCurrency","setSecondCurrency","onSubmit","event","preventDefault","required","type","step","min","value","onChange","target","Result","result","App","setResult","Form","plnValue","finalAmount","usd","eur","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gSAOeA,EAJO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACpB,0BAAMC,UAAU,iBAAiBD,ICMpBE,G,MAPA,kBACb,4BAAQD,UAAU,UAChB,wBAAIA,UAAU,iBAAd,sBACA,uBAAGA,UAAU,qBAAb,wCCyDWE,G,MA5DE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAAsB,EACZC,mBAAS,IADG,mBACjCC,EADiC,KACzBC,EADyB,OAEEF,mBAAS,IAFX,mBAEjCG,EAFiC,KAElBC,EAFkB,OAGIJ,mBAAS,IAHb,mBAGjCK,EAHiC,KAGjBC,EAHiB,KAUxC,OACE,0BAAMC,SANa,SAACC,GACpBA,EAAMC,iBACNV,GAAiBE,EAAQE,EAAeE,IAIVT,UAAU,QACtC,8BAAUA,UAAU,kBAClB,4BAAQA,UAAU,gBAAlB,aACA,2BAAOA,UAAU,eACf,0BAAMA,UAAU,mBAAhB,YACA,2BACEA,UAAU,eACVc,UAAQ,EACRC,KAAK,SACLC,KAAK,OACLC,IAAI,IACJC,MAAOb,EACPc,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBd,EAAUc,EAAOF,WAG/C,2BAAOlB,UAAU,eACf,0BAAMA,UAAU,mBAAhB,UACA,4BACEA,UAAU,eACVkB,MAAOX,EACPY,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBZ,EAAiBY,EAAOF,SAElD,iCACA,uCACA,uCACA,yCAGJ,2BAAOlB,UAAU,eACf,0BAAMA,UAAU,mBAAhB,QACA,4BACEA,UAAU,eACVkB,MAAOT,EACPU,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBV,EAAkBU,EAAOF,SAEnD,iCACA,uCACA,uCACA,yCAGJ,2BAAOlB,UAAU,eACf,4BAAQA,UAAU,gBAAlB,iBC9CKqB,EARA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,uBAAGtB,UAAU,UACX,2CADF,IAC4BsB,ICiDjBC,EA/CH,WAAO,IAAD,EACYnB,mBAAS,IADrB,mBACTkB,EADS,KACDE,EADC,KAsChB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAACC,EAAD,CAAMtB,gBAvCc,SAACE,EAAQE,EAAeE,GAC9C,IAAIiB,EAAW,GACXC,EAAc,GAMVC,EAJD,OAIMC,EAHN,MAKP,OAAQtB,GACN,IAAK,MACHmB,GAAYrB,EACZ,MAEF,IAAK,MACHqB,EAAWrB,EAASuB,EACpB,MACF,IAAK,MACHF,EAAWrB,EAASwB,EAIxB,OAAQpB,GACN,IAAK,MACHkB,EAAcD,EACd,MACF,IAAK,MACHC,EAAcD,EAAWE,EACzB,MACF,IAAK,MACHD,EAAcD,EAAWG,EAG7BL,EAAU,GAAD,OAAIG,EAAYG,QAAQ,GAAxB,YAA8BrB,OAMrC,kBAAC,EAAD,CAAQa,OAAQA,MCrCFS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9cf138b3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst FormContainer = ({ children }) => (\r\n  <main className=\"formContainer\">{children}</main>\r\n);\r\n\r\nexport default FormContainer;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Header = () => (\r\n  <header className=\"header\">\r\n    <h1 className=\"header__title\">Currency Converter</h1>\r\n    <p className=\"header__paragraph\">Fast and secure currency exchange</p>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst FieldSet = ({ calculateResult }) => {\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [firstCurrency, setFirstCurrency] = useState(\"\");\r\n  const [secondCurrency, setSecondCurrency] = useState(\"\");\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    calculateResult(+amount, firstCurrency, secondCurrency);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onFormSubmit} className=\"form\">\r\n      <fieldset className=\"from__fieldset\">\r\n        <legend className=\"form__legend\">Converter</legend>\r\n        <label className=\"form__label\">\r\n          <span className=\"form__labelText\">Amount: </span>\r\n          <input\r\n            className=\"form__select\"\r\n            required\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            min=\"1\"\r\n            value={amount}\r\n            onChange={({ target }) => setAmount(target.value)}\r\n          />\r\n        </label>\r\n        <label className=\"form__label\">\r\n          <span className=\"form__labelText\">From: </span>\r\n          <select\r\n            className=\"form__select\"\r\n            value={firstCurrency}\r\n            onChange={({ target }) => setFirstCurrency(target.value)}\r\n          >\r\n            <option></option>\r\n            <option>PLN</option>\r\n            <option>USD</option>\r\n            <option>EUR</option>\r\n          </select>\r\n        </label>\r\n        <label className=\"form__label\">\r\n          <span className=\"form__labelText\">To: </span>\r\n          <select\r\n            className=\"form__select\"\r\n            value={secondCurrency}\r\n            onChange={({ target }) => setSecondCurrency(target.value)}\r\n          >\r\n            <option></option>\r\n            <option>PLN</option>\r\n            <option>USD</option>\r\n            <option>EUR</option>\r\n          </select>\r\n        </label>\r\n        <label className=\"form__label\">\r\n          <button className=\"form__button\">Exchange</button>\r\n        </label>\r\n      </fieldset>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FieldSet;\r\n","import React from \"react\";\r\n\r\nconst Result = ({ result }) => {\r\n  return (\r\n    <p className=\"result\">\r\n      <strong>Result:</strong> {result}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","/* eslint-disable default-case */\r\nimport React, { useState } from \"react\";\r\nimport FormContainer from \"./FormContainer\";\r\nimport Header from \"./Header\";\r\nimport Form from \"./Form\";\r\nimport Result from \"./Result\";\r\n\r\nconst App = () => {\r\n  const [result, setResult] = useState(\"\");\r\n  const calculateResult = (amount, firstCurrency, secondCurrency) => {\r\n    let plnValue = \"\";\r\n    let finalAmount = \"\";\r\n    const rates = {\r\n      usd: 3.8922,\r\n      eur: 4.399,\r\n    };\r\n\r\n    const { usd, eur } = rates;\r\n\r\n    switch (firstCurrency) {\r\n      case \"PLN\":\r\n        plnValue = +amount;\r\n        break;\r\n\r\n      case \"USD\":\r\n        plnValue = amount * usd;\r\n        break;\r\n      case \"EUR\":\r\n        plnValue = amount * eur;\r\n        break;\r\n    }\r\n\r\n    switch (secondCurrency) {\r\n      case \"PLN\":\r\n        finalAmount = plnValue;\r\n        break;\r\n      case \"USD\":\r\n        finalAmount = plnValue / usd;\r\n        break;\r\n      case \"EUR\":\r\n        finalAmount = plnValue / eur;\r\n        break;\r\n    }\r\n    setResult(`${finalAmount.toFixed(2)} ${secondCurrency}`);\r\n  };\r\n  return (\r\n    <FormContainer>\r\n      <Header />\r\n      <Form calculateResult={calculateResult} />\r\n      <Result result={result} />\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}