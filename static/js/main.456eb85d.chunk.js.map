{"version":3,"sources":["Button/index.js","Field/index.js","Header/index.js","Form/index.js","Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Button","name","className","Field","title","Fragment","type","value","Header","props","Form","children","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUAKeA,G,UAFA,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAc,4BAAQC,UAAU,gBAAgBD,KCoBhDE,G,MApBD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACZ,kCACE,gCAASA,GACT,4BAAQF,UAAU,eAChB,uCACA,uCACA,yCAEa,QAAb,CAAEE,UACF,kBAAC,IAAMC,SAAP,KACE,2BAAOH,UAAU,cAAcI,KAAK,SAASL,KAAK,MAAMM,MAAM,SAFjE,CAKC,kBAAC,IAAMF,SAAP,KACE,yBAAKH,UAAU,eAAf,cCPOM,G,MAPA,SAACC,GAAD,OACb,4BAAQP,UAAU,UAChB,wBAAIA,UAAU,iBAAd,sBACA,uBAAGA,UAAU,qBAAb,wCCDWQ,G,MAFF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,0BAAMT,UAAU,QAAQS,KCExCC,G,MAFF,SAAC,GAAD,IAAGD,EAAH,EAAGA,SAAH,OAAkB,0BAAMT,UAAU,QAAQS,KCkBxCE,MAdf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOT,MAAM,SACb,kBAAC,EAAD,CAAQH,KAAK,WACb,kBAAC,EAAD,CAAOG,MAAM,OACb,kBAAC,EAAD,CAAQH,KAAK,gBCHDa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.456eb85d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Button = ({ name }) => <button className=\"form__button\">{name}</button>;\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Field = ({ title }) => (\r\n  <fieldset>\r\n    <legend>{title}</legend>\r\n    <select className=\"form__field\">\r\n      <option>PLN</option>\r\n      <option>USD</option>\r\n      <option>EUR</option>\r\n    </select>\r\n    {({ title } == \"From\")(\r\n      <React.Fragment>\r\n        <input className=\"form__field\" type=\"number\" name=\"buy\" value=\"100\" />\r\n      </React.Fragment>\r\n    )(\r\n      <React.Fragment>\r\n        <div className=\"form__field\">25.69</div>\r\n      </React.Fragment>\r\n    )}\r\n  </fieldset>\r\n);\r\n\r\nexport default Field;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Header = (props) => (\r\n  <header className=\"header\">\r\n    <h1 className=\"header__title\">Currency Converter</h1>\r\n    <p className=\"header__paragraph\">Fast and secure currency exchange</p>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ children }) => <form className=\"form\">{children}</form>;\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Main = ({ children }) => <main className=\"main\">{children}</main>;\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport Button from \"./Button\";\nimport Field from \"./Field\";\nimport Header from \"./Header\";\nimport Form from \"./Form\";\nimport Main from \"./Main\";\n\nfunction App() {\n  return (\n    <Main>\n      <Header />\n      <Form>\n        <Field title=\"From\" />\n        <Button name=\"Invert\" />\n        <Field title=\"To\" />\n        <Button name=\"Exchange\" />\n      </Form>\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}